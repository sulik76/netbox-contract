{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#contract-pluggin","title":"Contract pluggin","text":""},{"location":"#overview","title":"Overview","text":"<p>The pluggin adds contracts and invoices model to Netbox. It allows to register contract with objects. Add invoices to contracts. </p> <p>Check the documentation for additional information </p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#activate-venv","title":"Activate venv","text":"<p>To ensure our plugin is accessible to the NetBox installation, we first need to activate the Python virtual environment that was created when we installed NetBox. To do this, determine the virtual environment's path (this will be <code>/opt/netbox/venv/</code> if you use the documentation's defaults) and activate it:</p> <pre><code>$ source /opt/netbox/venv/bin/activate\n</code></pre>"},{"location":"#install-the-package","title":"Install the package","text":"<pre><code>$ python3 -m pip install netbox-contract\n</code></pre>"},{"location":"#configure-netbox","title":"Configure NetBox","text":"<p>Finally, we need to configure NetBox to enable our new plugin. Over in the NetBox installation path, open <code>netbox/netbox/configuration.py</code> and look for the <code>PLUGINS</code> parameter; this should be an empty list. (If it's not yet defined, go ahead and create it.) Add the name of our plugin to this list:</p> <pre><code># configuration.py\nPLUGINS = [\n    'netbox_contract',\n]\n</code></pre>"},{"location":"#customize-the-plugin","title":"Customize the plugin","text":"<p>The following configurationitems can be set:</p> <pre><code># configuration.py\nPLUGINS_CONFIG = {\n    'netbox_contract': {\n        'top_level_menu': True,\n        'default_accounting_dimensions':{\n            \"account\": \"\", \n            \"project\": \"\", \n            \"cost center\": \"\"\n        },\n        'mandatory_contract_fields': ['accounting_dimensions'],\n        'hidden_contract_fields': [],\n        'mandatory_invoice_fields': ['accounting_dimensions'],\n        'hidden_invoice_fields': [],\n    }\n}\n</code></pre> <ul> <li>top_level_menu : If \"Contracts\" appears under the \"Plugins\" menu item or on its own</li> <li>default_accounting_dimensions: The accounting dimensions which will appear in the field' background when empty.</li> <li>mandatory_contract_fields, mandatory_invoice_fields: Fields which are not required by default and can be set as such. The list of fields is at the bottom of the contract import form.</li> <li>hidden_contract_fields, hidden_invoice_fields: List of fields to be hidden. Fields should not be required to be hidden.</li> </ul>"},{"location":"#customize-the-plugin-fields-choices","title":"Customize the plugin fields choices","text":"<p>Internal partie reference the legal entity of your organization that is a partie to the contract.  </p> <pre><code># configuration.py\nFIELD_CHOICES = {\n    'netbox_contract.Contract.internal_partie': (\n        ('Nagravision SARL', 'Nagravision SARL', 'green'),\n        ('Nagra USA', 'Nagra USA', 'green'),\n        ('Nagra India', 'Nagra India', 'green'),\n    ),\n    'netbox_contract.Contract.currency': (\n        ('usd', 'USD'),\n        ('eur', 'EUR'),\n        ('chf', 'CHF'),\n        ('pln', 'PLN'),\n    ),\n    'netbox_contract.Contract.status': (\n        ('Active', 'Active', 'green'),\n        ('Cancled', 'Canceled', 'red'),\n    )\n}\n</code></pre>"},{"location":"#run-database-migrations","title":"Run database migrations","text":"<pre><code>(venv) $ cd /opt/netbox/netbox/\n(venv) $ python3 manage.py migrate\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#version-2","title":"Version 2","text":""},{"location":"changelog/#version-2014","title":"Version 2.0.14","text":"<ul> <li>127 Fix contract filtering</li> <li>Fix contact assignement.</li> </ul>"},{"location":"changelog/#version-2013","title":"Version 2.0.13","text":"<ul> <li>123 prepare plugin to Netbox 4.0 migration.</li> <li>125 Cleanup direct reference to Circuits in the Contract model. Correct database inconsistencies related to the ContractAssignment object renaming.</li> </ul>"},{"location":"changelog/#version-2011","title":"Version 2.0.11","text":"<ul> <li>115 API correction for contract external partie</li> <li>117 Tenant and accounting dimensions optional</li> <li>119 Add a Yearly recuring cost, read only, calculated field for contract</li> <li>15 Quick serach limited to active contracts</li> </ul>"},{"location":"changelog/#version-2010","title":"Version 2.0.10","text":"<ul> <li>107 Add the contacts tab to the service provider detail view.</li> <li>111 Correct assignment spelling.</li> </ul>"},{"location":"changelog/#version-209","title":"Version 2.0.9","text":"<ul> <li>42 Allow the selection of either providers or Service providers as contract third partie.</li> <li>Removed all reference to the direct assignement of circuits to contracts</li> <li>88 Add a placeholder value to the accounting dimensions jsonfield. This placeholder vale con be configured as part of the PLUGINS_CONFIG parameter in the configuration.py file (see above)</li> <li>89 add the posibility to link contracts to sites and virtual machines.</li> <li>99 list child contracts in on the parent view.</li> </ul>"},{"location":"changelog/#version-208","title":"Version 2.0.8","text":"<ul> <li>#91 Replace deprecated ( in netbox version 3.6) MultipleChoiceField.  </li> <li>48 Allow other plugin to inject visual in contract and invoice forms.  </li> <li>[89] (https://github.com/mlebreuil/netbox-contract/issues/89) Add contract assignement to virtual machines.</li> </ul>"},{"location":"changelog/#version-207","title":"Version 2.0.7","text":"<ul> <li>#85 Fix missing fields contract and invoice import and export forms.</li> </ul>"},{"location":"changelog/#version-206","title":"Version 2.0.6","text":"<ul> <li>#80 Fix missing fields in the API.</li> </ul>"},{"location":"changelog/#version-205","title":"Version 2.0.5","text":"<ul> <li>#75 Fix contract assignement for service providers.</li> <li>#73 Add comment field to contract import form</li> <li>#72 Add fields to the contract assignement bottom tables</li> <li>Remove the 'add' actions from the contract assignment list view</li> </ul>"},{"location":"changelog/#version-204","title":"Version 2.0.4","text":"<ul> <li>Add bulk update capability for contract assignement</li> <li>#63 Correct an API issue on the invoice object.</li> <li>#64 Add hierarchy to contract; New parent field created.</li> <li>#65 Add end date to contact import form.</li> <li>Removed the possibility of add or modify circuits to contracts. The field becomes read only and will be removed in next major release.</li> <li>Make accounting dimensions optional.</li> </ul>"},{"location":"changelog/#version-203","title":"Version 2.0.3","text":"<ul> <li>#60 Update contract quick search to also filter on fields \"External reference\" and \"Comments\".</li> <li>#49 Manage permissions.</li> </ul>"},{"location":"changelog/#version-202","title":"Version 2.0.2","text":"<p>Add support for Netbox 3.5 which become the minimum version supported to accomodate the removal of NetBoxModelCSVForm class (replaced by NetBoxModelImportForm) .</p>"},{"location":"changelog/#version-201","title":"Version 2.0.1","text":"<p>Add support contract assignement panel to devices.</p>"},{"location":"changelog/#version-200","title":"Version 2.0.0","text":"<p>Add a new contract asignement model to allow the assignement of contract not only to Circuits. The support for the direct Contract to Circuit relation will be removed in version 2.1.0 . In Order to migrate existing relations contract_migration.py script is provided and can be run from the django shell.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome!</p>"},{"location":"contributing/#types-of-contributions","title":"Types of contributions","text":""},{"location":"contributing/#report-bugs-or-submit-feedback","title":"Report bugs or submit feedback","text":"<p>Report bugs and submit feetback here.</p>"},{"location":"contributing/#fix-bugs","title":"Fix bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#coding-conventions","title":"Coding conventions","text":"<p>Netbox Style Guide Django Coding style </p> <p>For this: All files will be formated using the black auto-formatter. Configuration is stored in pyproject.toml  </p> <p>isort is used to automate import sorting.  </p> <p>Linting and PEP8 style enforcement will be done with  Flake8 which is a wrapper arround: - PyFlakes - pycodestyle - Ned Batchelder\u2019s McCabe script Configuration is maintained in the .flake8 file (no support for pyproject.toml)</p> <p>The pre-commit Python framework is used to simplify the managment of pre-commit hooks. Config is stored in .pre-commit-config.yaml   </p>"},{"location":"contributing/#repository-structure","title":"Repository structure","text":"<p>There are 2 permanent branch in the repository:</p> <ul> <li>master - The current stable release. Individual changes should never be pushed directly to this branch, but rather merged from develop.</li> <li>develop - Active development for the upcoming patch release. Pull requests will typically be based on this branch unless they introduce breaking changes that must be deferred until the next minor release.</li> </ul> <p>For each new feature or bug fix a branch is created from the corresponding issue.</p>"},{"location":"contributing/#setup-your-development-environment","title":"Setup your development environment","text":"<p><pre><code>python -m pip install pre-commit\npre-commit install\n</code></pre> 1. Install Netbox. Make sure taht at the Netbox installtion step you follow the \"Option B: Clone the Git Repository\"</p> <ol> <li> <p>From the Netbox directory you activate the NetBox virtual environment </p> <pre><code>$ cd netbox\n$ source venv/netbox/bin/activate\n</code></pre> </li> <li> <p>Fork the netbox-contract repo on GitHub.</p> </li> <li> <p>Clone your fork locally</p> <pre><code>$ cd ..\n$ git clone git@github.com:your_name_here/netbox-contract.git\n</code></pre> </li> <li> <p>Add the plugin to NetBox virtual environment:</p> <pre><code>$ python3 -m pip install -e netbox-contract\n</code></pre> </li> <li> <p>Update the Netbox configuration ans run the database migrations as mentionned in the plugin installation steps.  </p> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Make your changes locally.</p> </li> <li> <p>You can test your changes using the django development server:</p> <pre><code>$ python3 netbox/netbox/manage.py runserver 0.0.0.0:8000 --insecure\n</code></pre> <p>Connect to the name or IP of the server (as defined in ALLOWED_HOSTS) on port 8000; for example, http://127.0.0.1:8000/.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. </li> <li>The pull request should work for Python 3.8, 3.9, 3.10 and 3.11. Check Actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md) and that all tests pass. Then in the github project go to <code>Releases</code> and create a new release with a new tag.  This will automatically upload the release to pypi:</p>"}]}